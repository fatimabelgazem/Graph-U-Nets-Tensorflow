Graph Prediction Model
Ce projet implémente un modèle de prédiction de graphes utilisant des réseaux de neurones pour effectuer des tâches de classification sur des graphes de données. Le modèle est entraîné à partir de données spécifiques en utilisant une architecture de réseau de neurones graphiques (Graph Neural Network, GNN).

Table des matières
Description
Prérequis
Installation
Utilisation
Préparation des données
Exécution de l'entraînement
Évaluation du modèle
Structure du projet
Rôle de chaque fichier
Contributions
Licence
Description
Ce projet implémente un modèle de prédiction basé sur des graphes en utilisant TensorFlow. Le modèle est utilisé pour des tâches telles que la classification de nœuds et la prédiction de propriétés de graphes. Le code utilise une architecture de réseau de neurones pour apprendre les représentations des graphes et les utiliser pour prédire des résultats.

Le modèle s'entraîne sur un ensemble de données de graphes, qui peut être chargé à partir de fichiers externes. Les performances du modèle sont évaluées en utilisant des métriques telles que la précision et la perte.

Prérequis
Avant d'exécuter ce projet, vous devez installer les dépendances suivantes :

Python 3.7+
TensorFlow 2.x
NumPy
tqdm
Vous pouvez installer les dépendances requises avec le fichier requirements.txt :

bash
Copy
Edit
pip install -r requirements.txt
Fichier requirements.txt :
makefile
Copy
Edit
tensorflow==2.x
numpy==1.21.2
tqdm==4.62.3
Installation
Clonez ce dépôt dans votre environnement local :
bash
Copy
Edit
git clone https://github.com/username/graph-prediction-model.git
Allez dans le répertoire du projet :
bash
Copy
Edit
cd graph-prediction-model
Installez les dépendances :
bash
Copy
Edit
pip install -r requirements.txt
Utilisation
Préparation des données
Les données doivent être sous la forme de graphes. Le projet utilise un module appelé FileLoader pour charger les données dans le format attendu. Vous pouvez spécifier le chemin vers le dossier contenant les données avec l'argument -data.

Exécution de l'entraînement
Une fois les données préparées, vous pouvez entraîner le modèle en utilisant le script main.py.

Voici un exemple de commande pour lancer l'entraînement :

bash
Copy
Edit
python main.py -data PROTEINS -num_epochs 200 -batch 64 -lr 0.001 -fold 1
Cette commande lance l'entraînement sur le premier fold du jeu de données PROTEINS avec les paramètres suivants :

Nombre d'époques d'entraînement : 200
Taille des lots : 64
Taux d'apprentissage : 0.001
Fold : 1 (il existe 10 folds au total pour les tests croisés)
Vous pouvez également spécifier -fold 0 pour entraîner le modèle sur tous les folds (de 1 à 10).

Évaluation du modèle
Après l'entraînement, le modèle sera évalué sur le jeu de test, et les résultats seront enregistrés dans le fichier spécifié par l'argument -acc_file. Le modèle utilise la précision et la perte pour évaluer ses performances.

Les résultats des performances seront affichés à la fin de chaque époque et sauvegardés dans un fichier pour un suivi ultérieur.